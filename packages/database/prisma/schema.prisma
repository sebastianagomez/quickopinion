// Prisma schema for QuickOpinion
// Database: Supabase (PostgreSQL)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum CouponState {
  ACTIVE
  REDEEMED
  EXPIRED
  CANCELLED
}

// Tables
model Restaurant {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                String
  slug                String   @unique
  sendingDomain       String?  @map("sending_domain")
  emailSubaccountId   String?  @map("email_subaccount_id")
  defaultReward       String?  @map("default_reward")
  settings            Json     @default("{}")
  createdAt           DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  leads         Lead[]
  quizzes       Quiz[]
  coupons       Coupon[]
  emailEvents   EmailEvent[]

  @@map("restaurants")
}

model Lead {
  id                String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurantId      String    @map("restaurant_id") @db.Uuid
  name              String?
  email             String
  phone             String?
  consent           Boolean   @default(false)
  consentVersion    String?   @map("consent_version")
  consentTimestamp  DateTime? @map("consent_timestamp") @db.Timestamptz(6)
  source            String    @default("quiz")
  userIp            String?   @map("user_ip") @db.Inet
  userAgent         String?   @map("user_agent")
  unsubscribed      Boolean   @default(false)
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  restaurant      Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  quizResponses   QuizResponse[]
  coupons         Coupon[]
  emailEvents     EmailEvent[]

  @@unique([restaurantId, email])
  @@map("leads")
}

model Quiz {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  restaurantId  String   @map("restaurant_id") @db.Uuid
  name          String
  config        Json
  active        Boolean  @default(true)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  restaurant    Restaurant       @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  responses     QuizResponse[]

  @@map("quizzes")
}

model QuizResponse {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quizId        String   @map("quiz_id") @db.Uuid
  leadId        String   @map("lead_id") @db.Uuid
  answers       Json
  scoreCorrect  Int?     @map("score_correct")
  scoreTotal    Int?     @map("score_total")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  quiz  Quiz  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  lead  Lead  @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("quiz_responses")
}

model Coupon {
  code          String      @id
  restaurantId  String      @map("restaurant_id") @db.Uuid
  leadId        String      @map("lead_id") @db.Uuid
  reward        String
  state         CouponState @default(ACTIVE)
  expiresAt     DateTime    @map("expires_at") @db.Timestamptz(6)
  issuedAt      DateTime    @default(now()) @map("issued_at") @db.Timestamptz(6)
  redeemedAt    DateTime?   @map("redeemed_at") @db.Timestamptz(6)
  redeemedBy    String?     @map("redeemed_by") @db.Uuid
  branch        String?
  tableHint     String?     @map("table_hint")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)

  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  lead        Lead        @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@index([restaurantId, state, expiresAt])
  @@index([leadId])
  @@map("coupons")
}

model EmailEvent {
  id              BigInt    @id @default(autoincrement())
  restaurantId    String    @map("restaurant_id") @db.Uuid
  leadId          String?   @map("lead_id") @db.Uuid
  type            String
  provider        String
  providerMsgId   String?   @map("provider_msg_id")
  payload         Json?
  occurredAt      DateTime  @default(now()) @map("occurred_at") @db.Timestamptz(6)

  restaurant  Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  lead        Lead?       @relation(fields: [leadId], references: [id], onDelete: SetNull)

  @@index([restaurantId, type, occurredAt(sort: Desc)])
  @@index([leadId, occurredAt(sort: Desc)])
  @@map("email_events")
}

model LandingLead {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String
  phone     String?
  message   String?
  origin    String   @default("landing")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("landing_leads")
}

